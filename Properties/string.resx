<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ConvertInputSuccess" xml:space="preserve">
    <value>Convert inputs successfully.</value>
  </data>
  <data name="FailedChapter1_Bisection" xml:space="preserve">
    <value>Bisection Method failed.</value>
  </data>
  <data name="FailedChapter1_FalsePos" xml:space="preserve">
    <value>False Position Method failed.</value>
  </data>
  <data name="FailedChapter1_FalsePosition_CannotFindMinMax" xml:space="preserve">
    <value>False Position method failed: failed to Find Min Max of f' on (a;b).</value>
  </data>
  <data name="FailedChapter1_Func_ddf" xml:space="preserve">
    <value>Failed Processing function ddf.</value>
  </data>
  <data name="FailedChapter1_Func_df" xml:space="preserve">
    <value>Failed Processing function df.</value>
  </data>
  <data name="FailedChapter1_Func_f" xml:space="preserve">
    <value>Failed Processing function f.</value>
  </data>
  <data name="FailedChapter1_GradIterator_FailedDerivative" xml:space="preserve">
    <value>The gradient iterator failed to derivate</value>
  </data>
  <data name="FailedChapter1_Newton" xml:space="preserve">
    <value>Newton Method failed.</value>
  </data>
  <data name="FailedChapter1_SingularIterative" xml:space="preserve">
    <value>Singular Iterative Method failed.</value>
  </data>
  <data name="FailedChapter1_SingularIterative_CannotFindMinMax" xml:space="preserve">
    <value>Singular Iterative method failed: failed to find Min Max of f' on (a;b).</value>
  </data>
  <data name="FailedChapter1_Var_a" xml:space="preserve">
    <value>Failed Processing variable a.</value>
  </data>
  <data name="FailedChapter1_Var_b" xml:space="preserve">
    <value>Failed Processing variable b.</value>
  </data>
  <data name="FailedChapter1_Var_eps" xml:space="preserve">
    <value>Failed Processing variable eps.</value>
  </data>
  <data name="NoInputFileChapter1" xml:space="preserve">
    <value>Input file not detected, created file: FunctionInput.txt at .exe containing folder.</value>
  </data>
  <data name="PleaseRecheckInput" xml:space="preserve">
    <value>Please recheck the input file first and press enter to retry.</value>
  </data>
  <data name="TypeInChapter1Switch" xml:space="preserve">
    <value>Type 1 to select Bisection method 
Type 2 to select False Position method 
Type 3 to select Newton's method 
Type 4 to select Singular Iterative method:</value>
  </data>
  <data name="TypeInChapter2Switch" xml:space="preserve">
    <value>Type 1 to select Gauss method
Type 2 to select Gauss Jordan method
Type 3 to select LU decomposition
Type 4 to select Jacobi method
Type 5 to select Gauss-Seidel method
Type 6 to select simple Iterative.</value>
  </data>
</root>